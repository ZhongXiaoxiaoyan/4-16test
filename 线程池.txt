线程池

一堆固定数量/有最大数量限制的线程+任务队列----用于并发处理任务请求。
线程池避免大量频繁的线程创建销毁的时间成本。
线程池避免峰值压力带来瞬间大量线程被创建资源耗尽，程序崩溃的危险。

线程池的种类与使用场景？

线程池的实现：线程数量固定的线程池
int max_thr;                                                typedef bool(*task_callback)(int data)
int cur_thr;                                                  int _data;
int _quit_flag;                                              task_callback _handle
int _capacity;
std::queue<Task> _queue;                         SetTask(int data, task_callback handle)
pthread_mutex_t _mutex;
pthread_cond_t _cond_con;
pthread_cond_t _cond_pro;

       ThreadInit()  
       PushTask(Task &)
       ThreadQuit()

设计模式：针对一些经典的常见的场景，给定了一些对应的解决方案。

单例模式：
是设计模式中的一种，一个对象只能被实例化一次。

单利模式有饿汉与懒汉两种实现方式：
饿汉模式：程序在初始化时进行实例化，因为资源已经全部加载，因此运行速度快，流畅。
缺点是：初始化时候耗时较长。
懒汉模式：资源使用的时候再进行加载，对象使用的时候再实例化，初始化加载比较快，但是运行流畅度不够。

读写锁：使用读者写者模型――写互斥，读共享
写的时候，别人既不能写，也不能读。
读的时候大家可以一起读，但是不能写。
若当前已经加 写锁，则其他线程进行加 写锁/读锁都会被阻塞。
若当前已经加 读锁，则其他线程可以加读锁， 但是加写锁会阻塞。
读写锁通过两个计数器，一个writer计数器，一个read计数器。

读写锁的阻塞使用自选锁实现，
自选锁：循环判断条件是否满足，反映即使，但是cpu消耗较高，适用于阻塞时间很短的等待。















