多线程：
线程概念：传统进程是PCB，而Linux下线程以PCB实现，linux下的线程是一个pcb，是一个轻量级进程，进程是线程组。

线程是CPU调度的基本单位，进程是资源分配的基本单位。

多线程/多进程优缺点：共享虚拟地址空间

线程间通信更加方便：创建/销毁成本更低，调度成本更低。

缺乏访问控制，健壮性低。

线程数据的独有与共享：
独有：栈，寄存器，信号屏蔽字，错误返回码errno，线程id
共享：代码段，数据段，文件描述符，信号处理方式，工作路径，用户ID，组ID。

线程控制：使用的是库函数接口。
线程创建：pthread_create(&tid, NULL, thr_strat, arg)
tid				task_struct->pid	 		task_struct->tgid
线程空间首地址        LWP-轻量级进程ID                   线程组ID-进程ID=主线程id

线程终止：
线程入口函数中return；main中不能return，否则退出的是进程。
pthread_exit(void* retval)  主动退出，谁调用谁退出。
pthread_cancel(tid)          被动退出，取消指定的线程。
线程退出，也会为了保存退出返回值，而成为僵尸线程。
主线程退出，进程并不会退出。

线程等待：获取指定退出线程的返回值，并且允许操作系统回收线程资源。
一个线程启动之后，默认有一个属性是线程处于joinable状态；
处于joinable状态的线程，退出后，不会自动释放资源，需要被其他线程等待。

线程分离：
线程被分离的前提是用户不关心线程的退出返回值。

线程安全：多个线程同时操作临界资源而不会出现数据二义性。
在线程中是否对临界资源进行了非原子操作。

可重入/不可重入：多个执行流中是否可以同时进入函数运行而不会出现问题。

如何实现线程安全：
同步：临界资源的合理访问
互斥：临界资源同一时间唯一访问。

互斥如何实现：
互斥锁：如何实现安全操作，1/0
一个0/1的计数器--保证自己是原子性操作。
1表示可以加锁，加锁就是计数-1；
操作完毕之后要解锁，解锁就是计数+1；
0表示不可以加锁，不能加锁则等待。
互斥锁操作步骤：
1.定义互斥锁变量        pthread_mutex t
2.初始化互斥锁变量     pthread_mutex_init
3.加锁/解锁                pthread_mutex_lock/pthread_mutex_unlock
4.销毁互斥锁          pthread_mutex_destroy

死锁：
发生的必要条件：
1.互斥 （我操作的时候别人不能操作）
2.不可剥夺条件（我的锁，别人不能解锁）
3.请求与保持条件（请求第二个锁，并占着第一个锁不释放）
4.环路等待条件
产生场景：加锁/解锁顺序不同
死锁的处理方式
银行家算法
死锁面试题调研


同步的实现：临界资源访问合理性----生产出来才能使用-----等待+唤醒
没有资源则等待（死等），生产资源后唤醒等待。
条件变量：
1.定义条件变量          pthread_cond_t
2.初始化条件变量      pthread_cond_init
3.等待/唤醒           pthread_cond_wait/pthread_cond_signal
4.销毁条件变量    pthread_cond_destroy

条件变量为什么要搭配互斥锁使用？
 	因为条件本身只提供等待与唤醒的功能，具体什么时候等待需要用户来进行判断，这个条件的判断，通常涉及临界资源的操作（其他线程要通过修改条件，来促使条件满足），而这个临界资源的操作应该受保护，因此搭配互斥锁一起使用。


生产者与消费者模型：一个场所，两种角色，三种关系
场所：线程安全的队列
三种关系：
生产者――生产者  互斥
消费者――消费者  互斥
生产者――消费者  互斥+同步
BlockQueue
std::queue<>				QueuePush()
int _capacity				QueuePop()
mutex					
cond_productor
cond_consumer


信号量：计数器+等待队列+等待+唤醒
功能：实现线程/进程间的同步与互斥
计数器就是判断的条件，当计数只有0/1的时候那么就可以实现互斥了
等待队列+等待+唤醒实现同步的基本功能

system V信号量：信号量原语： P（-1 + 阻塞） / V（+1 + 唤醒） 操作

posix信号量：
定义： sem_t 信号量变量
初始化： sem_init
数据操作前资源计数判断： sem_wait
计数>0 则计数-1 ， 直接返回，往下操作
计数<=0 则计数-1   阻塞等待
生成数据后则计数+1， 唤醒等待：sem_post
销毁：sem_destroy

信号量实现一个线程安全队列
RingQueue{
std::vector<int> _queue(10);
int _write_step;
int _read_step;
sem_t _sem_pro; // 数据计数
sem_t _sem_idle; // 空闲空间计数
sem_t sem_lock; // 锁，针对wirte_step和read_step

}












